use std::fmt::{Display, Formatter};

#[derive(Debug)]
pub enum IRegister {
    Zero = 0,
    ReturnAddress = 1,
    StackPointer = 2,
    GlobalPointer = 3,
    ThreadPointer = 4,
    T0 = 5,
    T1 = 6,
    T2 = 7,
    /// Also called s0
    FramePointer = 8,
    S1 = 9,
    A0 = 10,
    A1 = 11,
    A2 = 12,
    A3 = 13,
    A4 = 14,
    A5 = 15,
    A6 = 16,
    A7 = 17,
    S2 = 18,
    S3 = 19,
    S4 = 20,
    S5 = 21,
    S6 = 22,
    S7 = 23,
    S8 = 24,
    S9 = 25,
    S10 = 26,
    S11 = 27,
    T3 = 28,
    T4 = 29,
    T5 = 30,
    T6 = 31,
}

impl Display for IRegister {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
        write!(
            f,
            "{}",
            match self {
                IRegister::Zero => "zero",
                IRegister::ReturnAddress => "ra",
                IRegister::StackPointer => "sp",
                IRegister::GlobalPointer => "gp",
                IRegister::ThreadPointer => "tp",
                IRegister::T0 => "t0",
                IRegister::T1 => "t1",
                IRegister::T2 => "t2",
                IRegister::FramePointer => "s0",
                IRegister::S1 => "s1",
                IRegister::A0 => "a0",
                IRegister::A1 => "a1",
                IRegister::A2 => "a2",
                IRegister::A3 => "a3",
                IRegister::A4 => "a4",
                IRegister::A5 => "a5",
                IRegister::A6 => "a6",
                IRegister::A7 => "a7",
                IRegister::S2 => "s2",
                IRegister::S3 => "s3",
                IRegister::S4 => "s4",
                IRegister::S5 => "s5",
                IRegister::S6 => "s6",
                IRegister::S7 => "s7",
                IRegister::S8 => "s8",
                IRegister::S9 => "s9",
                IRegister::S10 => "s10",
                IRegister::S11 => "s11",
                IRegister::T3 => "t3",
                IRegister::T4 => "t4",
                IRegister::T5 => "t5",
                IRegister::T6 => "t6",
            }
        )
    }
}

impl IRegister {
    pub fn from_int(int: u32) -> Self {
        return match int {
            0 => Self::Zero,
            1 => Self::ReturnAddress,
            2 => Self::StackPointer,
            3 => Self::GlobalPointer,
            4 => Self::ThreadPointer,
            5 => Self::T0,
            6 => Self::T1,
            7 => Self::T2,
            8 => Self::FramePointer,
            9 => Self::S1,
            10 => Self::A0,
            11 => Self::A1,
            12 => Self::A2,
            13 => Self::A3,
            14 => Self::A4,
            15 => Self::A5,
            16 => Self::A6,
            17 => Self::A7,
            18 => Self::S2,
            19 => Self::S3,
            20 => Self::S4,
            21 => Self::S5,
            22 => Self::S6,
            23 => Self::S7,
            24 => Self::S8,
            25 => Self::S9,
            26 => Self::S10,
            27 => Self::S11,
            28 => Self::T3,
            29 => Self::T4,
            30 => Self::T5,
            31 => Self::T6,
            x => panic!("converted invalid to register {}", x),
        };
    }

    pub fn from_string(str: &str) -> Result<Self, String> {
        return match str {
            "zero" => Ok(Self::Zero),
            "ra" => Ok(Self::ReturnAddress),
            "sp" => Ok(Self::StackPointer),
            "gp" => Ok(Self::GlobalPointer),
            "tp" => Ok(Self::ThreadPointer),
            "t0" => Ok(Self::T0),
            "t1" => Ok(Self::T1),
            "t2" => Ok(Self::T2),
            "s0" => Ok(Self::FramePointer),
            "s1" => Ok(Self::S1),
            "a0" => Ok(Self::A0),
            "a1" => Ok(Self::A1),
            "a2" => Ok(Self::A2),
            "a3" => Ok(Self::A3),
            "a4" => Ok(Self::A4),
            "a5" => Ok(Self::A5),
            "a6" => Ok(Self::A6),
            "a7" => Ok(Self::A7),
            "s2" => Ok(Self::S2),
            "s3" => Ok(Self::S3),
            "s4" => Ok(Self::S4),
            "s5" => Ok(Self::S5),
            "s6" => Ok(Self::S6),
            "s7" => Ok(Self::S7),
            "s8" => Ok(Self::S8),
            "s9" => Ok(Self::S9),
            "s10" => Ok(Self::S10),
            "s11" => Ok(Self::S11),
            "t3" => Ok(Self::T3),
            "t4" => Ok(Self::T4),
            "t5" => Ok(Self::T5),
            "t6" => Ok(Self::T6),
            x => Err(format!("converted invalid str to register {}", x)),
        };
    }
}
